// Generated by CoffeeScript 1.4.0
(function() {
  var BundleUp, Css, Js, async, expect, express, fs, helper, request;

  expect = require('expect.js');

  BundleUp = require('./../index');

  Js = require('./../lib/js');

  Css = require('./../lib/css');

  helper = require('./helper');

  fs = require('fs');

  express = require('express');

  request = require('request');

  async = require('async');

  describe('OnTheFlyCompiler', function() {
    var bundle;
    bundle = {};
    beforeEach(function() {
      helper.beforeEach();
      this.app = express.createServer();
      bundle = BundleUp(this.app, __dirname + '/files/assets.coffee', {
        staticRoot: __dirname + '/files/public/',
        staticUrlRoot: "/",
        bundle: false
      });
      this.app.use(express["static"](__dirname + '/files/public/'));
      return this.app.listen(1338);
    });
    afterEach(function() {
      return this.app.close();
    });
    it('should compile stylus files correctly', function(done) {
      return request.get('http://localhost:1338/min/stylus/main.css', function(err, res) {
        var expected;
        expected = "h1 {\n  color: #00f;\n}\nbody {\n  background-color: #ff0;\n}\n";
        expect(res.body).to.equal(expected);
        return done();
      });
    });
    it('should compile coffee files correctly', function(done) {
      return request.get('http://localhost:1338/min/coffee/1.js', function(err, res) {
        var expected;
        expected = '(function() {\n\n  console.log(\'1\');\n\n}).call(this);\n';
        expect(res.body).to.equal(expected);
        return done();
      });
    });
    it('should map imported files for main.styl first time it is requested', function(done) {
      var file;
      file = bundle.css.files[0];
      expect(file.origFile).to.equal(__dirname + '/files/stylus/main.styl');
      expect(file._imports).to.equal(void 0);
      return request.get('http://localhost:1338/min/stylus/main.css', function(err, res) {
        var found, imp, _i, _len, _ref;
        expect(file._imports).to.not.equal(void 0);
        found = false;
        _ref = file._imports;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          imp = _ref[_i];
          if (imp.file === __dirname + '/files/stylus/typography.styl') {
            found = true;
          }
        }
        expect(found).to.equal(true);
        return done();
      });
    });
    it('should re-compile main.styl when imported file change', function(done) {
      var file;
      file = bundle.css.files[0];
      expect(file.origFile).to.equal(__dirname + '/files/stylus/main.styl');
      return request.get('http://localhost:1338/min/stylus/main.css', function(err, res) {
        var afterTime, beforeTime, oldContent;
        beforeTime = (fs.statSync(__dirname + '/files/stylus/typography.styl')).mtime;
        oldContent = fs.readFileSync(__dirname + '/files/stylus/typography.styl', 'utf8');
        fs.writeFileSync(__dirname + '/files/stylus/typography.styl', oldContent + '\n', 'utf8');
        afterTime = (fs.statSync(__dirname + '/files/stylus/typography.styl')).mtime;
        return request.get('http://localhost:1338/min/stylus/main.css', function(err, res) {
          var importedFile;
          expect(beforeTime).to.not.equal(afterTime);
          importedFile = file._imports[1];
          expect(importedFile.file).to.equal(__dirname + '/files/stylus/typography.styl');
          expect(importedFile.mtime).to.eql(afterTime);
          fs.writeFileSync(__dirname + '/files/stylus/typography.styl', oldContent, 'utf8');
          return done();
        });
      });
    });
    it('should not cause any errors when parallel requests comes in at the same time', function(done) {
      return async.forEach([1, 2, 3, 4], function(i, cb) {
        return request.get('http://localhost:1338/min/stylus/main.css', function(err, res) {
          expect(res.statusCode).to.equal(200);
          return cb(err);
        });
      }, function(err) {
        return done(err);
      });
    });
    return describe('Error handling', function() {
      it('should respond with 500 when requesting a coffee file with syntax errors', function(done) {
        bundle.js.addFile(__dirname + '/files/coffee/syntax_error.coffee');
        return request.get('http://localhost:1338/min/coffee/syntax_error.js', function(err, res) {
          expect(res.statusCode).to.equal(500);
          return done();
        });
      });
      it('should respond with 500 when requesting a stylus file with syntax errors', function(done) {
        bundle.css.addFile(__dirname + '/files/stylus/syntax_error.styl');
        return request.get('http://localhost:1338/min/stylus/syntax_error.css', function(err, res) {
          expect(res.statusCode).to.equal(500);
          return done();
        });
      });
      return it('should respond with 500 when requesting a file not found', function(done) {
        bundle.js.addFile(__dirname + '/files/coffee/not_found.coffee');
        return request.get('http://localhost:1338/min/coffee/not_found.js', function(err, res) {
          expect(res.statusCode).to.equal(500);
          return done();
        });
      });
    });
  });

}).call(this);
