// Generated by CoffeeScript 1.4.0
(function() {
  var Css, Js, expect, fs, helper;

  expect = require('expect.js');

  Js = require('./../lib/js');

  Css = require('./../lib/css');

  helper = require('./helper');

  fs = require('fs');

  describe('Path normalizing', function() {
    beforeEach(function() {
      return helper.beforeEach();
    });
    describe('staticRoot', function() {
      it("shouldn't matter if staticRoot ends with / or not", function() {
        var firstFile, secondFile;
        this.js = new Js({
          staticRoot: "" + __dirname + "/files/public",
          staticUrlRoot: '/'
        });
        this.js.addFile(__dirname + '/files/js/1.js');
        firstFile = this.js.files[0];
        this.js = new Js({
          staticRoot: "" + __dirname + "/files/public/",
          staticUrlRoot: '/'
        });
        this.js.addFile(__dirname + '/files/js/1.js');
        secondFile = this.js.files[0];
        expect(firstFile.file).to.equal(secondFile.file);
        expect(firstFile.origFile).to.equal(secondFile.origFile);
        return expect(firstFile.file).to.equal(__dirname + '/files/public/min/js/1.js');
      });
      return it("shouldn't matter if staticRoot path isn't 'normalized'", function() {
        this.js = new Js({
          staticRoot: "" + __dirname + "/files/public",
          staticUrlRoot: '/'
        });
        return expect(this.js.options.staticRoot).to.equal("" + __dirname + "/files/public");
      });
    });
    return describe('staticUrlRoot', function() {
      it("shouldn't matter if staticUrlRoot ends with / or not", function() {
        var firstFile, secondFile;
        this.js = new Js({
          staticRoot: "" + __dirname + "/files/public",
          staticUrlRoot: '/url'
        });
        this.js.addFile(__dirname + '/files/js/1.js');
        firstFile = this.js.files[0];
        this.js = new Js({
          staticRoot: "" + __dirname + "/files/public",
          staticUrlRoot: '/url/'
        });
        this.js.addFile(__dirname + '/files/js/1.js');
        secondFile = this.js.files[0];
        expect(firstFile.url).to.equal(secondFile.url);
        return expect(firstFile.url).to.equal('/url/min/js/1.js');
      });
      it('should add the correct url using staticUrlRoot http://www.example.com', function() {
        this.js = new Js({
          staticRoot: "" + __dirname + "/files/public",
          staticUrlRoot: 'http://www.example.com'
        });
        this.js.addFile(__dirname + '/files/js/1.js');
        return expect(this.js.files[0].url).to.equal('http://www.example.com/min/js/1.js');
      });
      return it('should add the correct url using staticUrlRoot https://www.example.com/', function() {
        this.js = new Js({
          staticRoot: "" + __dirname + "/files/public",
          staticUrlRoot: 'https://www.example.com/'
        });
        this.js.addFile(__dirname + '/files/js/1.js');
        return expect(this.js.files[0].url).to.equal('https://www.example.com/min/js/1.js');
      });
    });
  });

}).call(this);
