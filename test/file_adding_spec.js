// Generated by CoffeeScript 1.4.0
(function() {
  var Css, Js, expect, fs, helper;

  expect = require('expect.js');

  Js = require('./../lib/js');

  Css = require('./../lib/css');

  helper = require('./helper');

  fs = require('fs');

  describe('When adding files', function() {
    beforeEach(function() {
      helper.beforeEach();
      this.js = new Js({
        staticRoot: "" + __dirname + "/files/public",
        staticUrlRoot: '/'
      });
      return this.css = new Css({
        staticRoot: "" + __dirname + "/files/public",
        staticUrlRoot: '/'
      });
    });
    it('should add the correct paths when adding a js file', function() {
      var file;
      this.js.addFile(__dirname + '/files/js/1.js');
      expect(this.js.files.length).to.equal(1);
      file = this.js.files[0];
      expect(file.file).to.equal("" + __dirname + "/files/public/min/js/1.js");
      expect(file.origFile).to.equal(__dirname + '/files/js/1.js');
      return expect(file.url).to.equal('/min/js/1.js');
    });
    it('should add the correct paths when adding a coffee file', function() {
      var file;
      this.js.addFile(__dirname + '/files/coffee/1.coffee');
      expect(this.js.files.length).to.equal(1);
      file = this.js.files[0];
      expect(file.file).to.equal("" + __dirname + "/files/public/min/coffee/1.js");
      expect(file.origFile).to.equal(__dirname + '/files/coffee/1.coffee');
      return expect(file.url).to.equal('/min/coffee/1.js');
    });
    it('should add the correct paths when adding a css file', function() {
      var file;
      this.css.addFile(__dirname + '/files/css/screen.css');
      expect(this.css.files.length).to.equal(1);
      file = this.css.files[0];
      expect(file.file).to.equal("" + __dirname + "/files/public/min/css/screen.css");
      expect(file.origFile).to.equal(__dirname + '/files/css/screen.css');
      return expect(file.url).to.equal('/min/css/screen.css');
    });
    it('should add the correct paths when adding a styl file', function() {
      var file;
      this.css.addFile(__dirname + '/files/stylus/main.styl');
      expect(this.css.files.length).to.equal(1);
      file = this.css.files[0];
      expect(file.file).to.equal("" + __dirname + "/files/public/min/stylus/main.css");
      expect(file.origFile).to.equal(__dirname + '/files/stylus/main.styl');
      return expect(file.url).to.equal('/min/stylus/main.css');
    });
    it('should not point to min/ when adding a js file already in staticRoot', function() {
      var file;
      this.js.addFile(__dirname + '/files/public/jquery.js');
      expect(this.js.files.length).to.equal(1);
      file = this.js.files[0];
      expect(file.file).to.equal("" + __dirname + "/files/public/jquery.js");
      expect(file.origFile).to.equal("" + __dirname + "/files/public/jquery.js");
      return expect(file.url).to.equal('/jquery.js');
    });
    it('should not point to min/ when adding a css file already in staticRoot', function() {
      var file;
      this.css.addFile(__dirname + '/files/public/styles/bootstrap.css');
      expect(this.css.files.length).to.equal(1);
      file = this.css.files[0];
      expect(file.file).to.equal("" + __dirname + "/files/public/styles/bootstrap.css");
      expect(file.origFile).to.equal("" + __dirname + "/files/public/styles/bootstrap.css");
      return expect(file.url).to.equal('/styles/bootstrap.css');
    });
    it('should add the correct paths when adding a coffee file inside staticRoot', function() {
      var file;
      this.js.addFile(__dirname + '/files/public/main.coffee');
      expect(this.js.files.length).to.equal(1);
      file = this.js.files[0];
      expect(file.file).to.equal("" + __dirname + "/files/public/min/main.js");
      expect(file.origFile).to.equal(__dirname + '/files/public/main.coffee');
      return expect(file.url).to.equal('/min/main.js');
    });
    it('should add the correct paths when adding a styl file inside staticRoot', function() {
      var file;
      this.css.addFile(__dirname + '/files/public/print.styl');
      expect(this.css.files.length).to.equal(1);
      file = this.css.files[0];
      expect(file.file).to.equal("" + __dirname + "/files/public/min/print.css");
      expect(file.origFile).to.equal(__dirname + '/files/public/print.styl');
      return expect(file.url).to.equal('/min/print.css');
    });
    it('should not change the css file when adding a file already in staticRoot', function() {
      var afterStat, beforeStat, file, key, works;
      file = __dirname + '/files/public/styles/bootstrap.css';
      beforeStat = fs.statSync(file);
      this.css.addFile(file);
      afterStat = fs.statSync(file);
      works = false;
      for (key in beforeStat) {
        works = true;
        expect(beforeStat[key]).to.eql(afterStat[key]);
      }
      return expect(works).to.equal(true);
    });
    it('should not change the js file when adding a file already in staticRoot', function() {
      var afterStat, beforeStat, file, key, works;
      file = __dirname + '/files/public/jquery.js';
      beforeStat = fs.statSync(file);
      this.css.addFile(file);
      afterStat = fs.statSync(file);
      works = false;
      for (key in beforeStat) {
        works = true;
        expect(beforeStat[key]).to.eql(afterStat[key]);
      }
      return expect(works).to.equal(true);
    });
    it('should only add the file once when adding the same file twice', function() {
      var file;
      this.js.addFile(__dirname + '/files/coffee/1.coffee');
      this.js.addFile(__dirname + '/files/coffee/1.coffee');
      expect(this.js.files.length).to.equal(1);
      file = this.js.files[0];
      expect(file.file).to.equal("" + __dirname + "/files/public/min/coffee/1.js");
      expect(file.origFile).to.equal(__dirname + '/files/coffee/1.coffee');
      return expect(file.url).to.equal('/min/coffee/1.js');
    });
    return describe('filtered paths', function() {
      it('should be able to add 1.coffee using files/nested/js/*.coffee', function() {
        this.js.addFile(__dirname + '/files/nested/js/*.coffee');
        expect(this.js.files.length).to.equal(1);
        return expect(this.js.files[0].origFile).to.equal(__dirname + '/files/nested/js/1.coffee');
      });
      it('should be able to add all 2 coffee files using files/nested/js/**.coffee', function() {
        this.js.addFile(__dirname + '/files/nested/js/**.coffee');
        expect(this.js.files.length).to.equal(2);
        expect(this.js.files[0].origFile).to.equal(__dirname + '/files/nested/js/1.coffee');
        return expect(this.js.files[1].origFile).to.equal(__dirname + '/files/nested/js/sub/2.coffee');
      });
      it('should be able to add all 6 files using files/coffee/js/**', function() {
        this.js.addFile(__dirname + '/files/nested/js/**');
        expect(this.js.files.length).to.equal(6);
        expect(this.js.files[0].origFile).to.equal(__dirname + '/files/nested/js/1.coffee');
        expect(this.js.files[1].origFile).to.equal(__dirname + '/files/nested/js/1.js');
        expect(this.js.files[2].origFile).to.equal(__dirname + '/files/nested/js/sub/2.coffee');
        expect(this.js.files[3].origFile).to.equal(__dirname + '/files/nested/js/sub/2.js');
        expect(this.js.files[4].origFile).to.equal(__dirname + '/files/nested/js/sub/sub2/3.js');
        return expect(this.js.files[5].origFile).to.equal(__dirname + '/files/nested/js/sub/sub2/4.js');
      });
      it('should add 0 files when trying /files/invalid*', function() {
        this.js.addFile(__dirname + '/files/invalid*');
        return expect(this.js.files.length).to.equal(0);
      });
      return it('should add 6 files when trying /files/nested/j*', function() {
        this.js.addFile(__dirname + '/files/nested/j*');
        return expect(this.js.files.length).to.equal(6);
      });
    });
  });

}).call(this);
