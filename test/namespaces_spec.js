// Generated by CoffeeScript 1.4.0
(function() {
  var BundleUp, Css, Js, expect, express, fs, helper;

  expect = require('expect.js');

  BundleUp = require('./../index');

  Js = require('./../lib/js');

  Css = require('./../lib/css');

  helper = require('./helper');

  fs = require('fs');

  express = require('express');

  describe('Namespaces', function() {
    beforeEach(function() {
      helper.beforeEach();
      return this.js = new Js({
        staticRoot: "" + __dirname + "/files/public",
        staticUrlRoot: '/'
      });
    });
    it('should have default namespace set to "global"', function() {
      this.js.addFile(__dirname + '/files/coffee/1.coffee');
      return expect(this.js.files[0].namespace).to.equal('global');
    });
    it('should add the correct namespaces when 3 coffee files in separate namespaces', function() {
      this.js.addFile(__dirname + '/files/coffee/1.coffee', 'namespace1');
      this.js.addFile(__dirname + '/files/coffee/2.coffee', 'namespace2');
      this.js.addFile(__dirname + '/files/coffee/3.coffee', 'namespace3');
      expect(this.js.files.length).to.equal(3);
      expect(this.js.files[0].namespace).to.equal('namespace1');
      expect(this.js.files[1].namespace).to.equal('namespace2');
      return expect(this.js.files[2].namespace).to.equal('namespace3');
    });
    it('should add the same file in different namespaces', function() {
      this.js.addFile(__dirname + '/files/coffee/1.coffee', 'namespace1');
      this.js.addFile(__dirname + '/files/coffee/1.coffee', 'namespace2');
      expect(this.js.files.length).to.equal(2);
      expect(this.js.files[0].namespace).to.equal('namespace1');
      return expect(this.js.files[1].namespace).to.equal('namespace2');
    });
    it('should add the correct namespaces when using filtered paths', function() {
      this.js.addFile(__dirname + '/files/coffee/*.coffee', 'namespace1');
      expect(this.js.files.length).to.equal(4);
      expect(this.js.files[0].namespace).to.equal('namespace1');
      expect(this.js.files[1].namespace).to.equal('namespace1');
      expect(this.js.files[2].namespace).to.equal('namespace1');
      return expect(this.js.files[3].namespace).to.equal('namespace1');
    });
    return describe('bundle:true', function() {
      beforeEach(function() {
        this.app = express.createServer();
        return this.bundle = BundleUp(this.app, __dirname + '/files/assets_namespaced.coffee', {
          staticRoot: __dirname + '/files/public/',
          staticUrlRoot: '/',
          bundle: true
        });
      });
      it('should create 2 js bundles and 2 css bundles', function() {
        expect(this.bundle.js.files.length).to.equal(2);
        return expect(this.bundle.css.files.length).to.equal(2);
      });
      return it('should create global.js bundle and custom_namespace.bundle.js', function() {
        expect(this.bundle.js.files.length).to.equal(2);
        expect(this.bundle.js.files[0].origFile).to.contain('global.js');
        expect(this.bundle.js.files[1].origFile).to.contain('custom_namespace.js');
        expect(this.bundle.js.files[0].namespace).to.equal('global');
        return expect(this.bundle.js.files[1].namespace).to.equal('custom_namespace');
      });
    });
  });

}).call(this);
