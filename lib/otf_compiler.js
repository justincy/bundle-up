// Generated by CoffeeScript 1.4.0
(function() {
  var OnTheFlyCompiler, async, compile, fs, mkdirp, stylus,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  mkdirp = require('mkdirp');

  async = require('async');

  stylus = require('stylus');

  compile = require('./compiler').compile;

  OnTheFlyCompiler = (function() {

    function OnTheFlyCompiler(js, css, compilers) {
      this.writeToFile = __bind(this.writeToFile, this);

      this.compileFile = __bind(this.compileFile, this);

      this.handleFile = __bind(this.handleFile, this);

      this.middleware = __bind(this.middleware, this);

      var setImportFlag;
      this.js = js;
      this.css = css;
      this.compilers = compilers;
      setImportFlag = function(files) {
        var file, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          _results.push(file._importChecked = false);
        }
        return _results;
      };
      setImportFlag(this.js.files);
      setImportFlag(this.css.files);
    }

    OnTheFlyCompiler.prototype.middleware = function(req, res, next) {
      var file, i, _i, _j, _len, _len1, _ref, _ref1;
      if (req.url.indexOf('.js') > -1) {
        _ref = this.js.files;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          file = _ref[i];
          if (req.url === file.url) {
            return this.handleFile(file, function(err) {
              return next(err);
            });
          } else {
            if (i === (this.js.files.length - 1)) {
              return next();
            }
          }
        }
      } else if (req.url.indexOf('.css') > -1) {
        _ref1 = this.css.files;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          file = _ref1[i];
          if (req.url === file.url) {
            if (req.url === file.url) {
              return this.handleFile(file, function(err) {
                return next(err);
              });
            }
          } else {
            if (i === (this.css.files.length - 1)) {
              return next();
            }
          }
        }
      }
      return next();
    };

    OnTheFlyCompiler.prototype.handleFile = function(file, fn) {
      var _this = this;
      if (!file._importChecked) {
        this.mapImports(file, function(err) {
          if (err != null) {
            return fn(err);
          }
          file._importChecked = true;
          return _this.handleFile(file, fn);
        });
        return;
      }
      return fs.stat(file.origFile, function(err, destStats) {
        var changed, compileFile;
        if (err != null) {
          return fn(err);
        }
        if (!file._mtime) {
          return _this.compileFile(file, fn);
        }
        if (file._mtime < destStats.mtime) {
          return _this.compileFile(file, fn);
        } else if (file._imports != null) {
          changed = [];
          compileFile = _this.compileFile;
          return async.forEach(file._imports, function(importedFile, cb) {
            return fs.stat(importedFile.file, function(err, stats) {
              if (err != null) {
                return cb(err);
              }
              if (importedFile.mtime < stats.mtime) {
                importedFile.mtime = stats.mtime;
                changed.push(importedFile);
              }
              return cb();
            });
          }, function(err) {
            if (err != null) {
              return fn(err);
            }
            if (changed.length > 0) {
              return compileFile(file, fn);
            } else {
              return fn();
            }
          });
        } else {
          return fn();
        }
      });
    };

    OnTheFlyCompiler.prototype.compileFile = function(file, fn) {
      var _this = this;
      if (!file.needsCompiling) {
        return fn();
      }
      return fs.readFile(file.origFile, 'utf8', function(err, content) {
        if (err != null) {
          return fn(err);
        }
        return compile(_this.compilers, content, file.origFile, function(err, newContent) {
          if (err != null) {
            return fn(err);
          }
          return _this.writeToFile(file.file, newContent, function(err) {
            if (err != null) {
              return fn(err);
            }
            return fs.stat(file.origFile, function(err, stats) {
              if (err != null) {
                return fn(err);
              }
              file._mtime = stats.mtime;
              return fn();
            });
          });
        });
      });
    };

    OnTheFlyCompiler.prototype.writeToFile = function(file, content, fn) {
      var _this = this;
      return fs.writeFile(file, content, 'utf8', function(err) {
        var splitted;
        if (err) {
          if (err.code === 'ENOENT') {
            splitted = file.split('/');
            return mkdirp(splitted.splice(0, splitted.length - 1).join('/'), 0x1ff, function(err) {
              if (err != null) {
                return fn(err);
              }
              return _this.writeToFile(file, content, fn);
            });
          } else {
            return fn(err);
          }
        } else {
          return fn();
        }
      });
    };

    OnTheFlyCompiler.prototype.mapImports = function(file, fn) {
      var _this = this;
      if (file.origFile.indexOf('.styl') > -1) {
        return fs.readFile(file.origFile, 'utf8', function(err, content) {
          var paths, style;
          if (err != null) {
            return fn(err);
          }
          style = _this.compilers.stylus(content, file.origFile);
          file._imports = [];
          paths = style.options._imports = [];
          return style.render(function(err, css) {
            return async.forEach(paths, function(path, cb) {
              if (path.path) {
                return fs.stat(path.path, function(err, stats) {
                  if (err != null) {
                    return cb(err);
                  }
                  file._imports.push({
                    file: path.path,
                    mtime: stats.mtime
                  });
                  return cb();
                });
              } else {
                return cb();
              }
            }, function(err) {
              return fn(err);
            });
          });
        });
      } else {
        return fn();
      }
    };

    return OnTheFlyCompiler;

  })();

  module.exports = OnTheFlyCompiler;

}).call(this);
