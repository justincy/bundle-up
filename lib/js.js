// Generated by CoffeeScript 1.4.0
(function() {
  var Bundle, Js, UglifyJS, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Bundle = require('./bundle');

  UglifyJS = require('uglify-js');

  _ = require('lodash');

  Js = (function(_super) {

    __extends(Js, _super);

    function Js(options) {
      this.options = options;
      this.fileExtension = '.js';
      Js.__super__.constructor.apply(this, arguments);
    }

    Js.prototype.minify = function(code) {
      var ast;
      if (!this.options.minifyJs) {
        return code;
      }
      ast = UglifyJS.parser.parse(code);
      ast = UglifyJS.uglify.ast_mangle(ast);
      ast = UglifyJS.uglify.ast_squeeze(ast);
      return UglifyJS.uglify.gen_code(ast);
    };

    Js.prototype.render = function(namespace) {
      var SET_appended, file, js, _i, _len, _ref;
      js = '';
      SET_appended = false;
      _ref = this.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.namespace === namespace) {
          if (typeof file.url === "string") {
            js += "<script src='" + file.url + "' type='text/javascript'></script>";
          }
          if (typeof file.url === "boolean") {
            js += "<script src='" + file.file + "' type='text/javascript'></script>";
          }
          if (typeof file.url === "object") {
            js += "<script type='text/javascript'>";
            if (!SET_appended) {
              SET_appended = true;
              js += this.minify("bup={SET:" + (this.SET.toString()) + "};") + ";";
            }
            js += _.keys(file.file).map(function(key) {
              return "bup.SET('" + key + "');" + key + " = " + (JSON.stringify(file.file[key])) + ";";
            }).join(' ');
            js += "</script>";
          }
        }
      }
      return js;
    };

    Js.prototype.SET = function(strObj) {
      var el, obj, str;
      str = strObj.split('.');
      obj = window;
      while ((el = str.shift())) {
        if (typeof obj[el] === "undefined") {
          obj[el] = {};
        }
        obj = obj[el];
      }
      return null;
    };

    Js.prototype._convertFilename = function(filename) {
      var splitted;
      splitted = filename.split('.');
      return splitted.splice(0, splitted.length - 1).join('.') + '.js';
    };

    return Js;

  })(Bundle);

  module.exports = Js;

}).call(this);
