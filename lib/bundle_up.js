// Generated by CoffeeScript 1.4.0
(function() {
  var AssetsManager, BundleUp, Css, Js, OnTheFlyCompiler, compilers, _;

  AssetsManager = require('./assets_manager');

  _ = require('lodash');

  Js = require('./js');

  Css = require('./css');

  OnTheFlyCompiler = require('./otf_compiler');

  compilers = require('./default_compilers');

  BundleUp = (function() {

    function BundleUp(app, asset, options) {
      var done,
        _this = this;
      if (options == null) {
        options = {
          bundle: false
        };
      }
      if (options.compilers == null) {
        options.compilers = compilers;
      } else {
        options.compilers.stylus = options.compilers.stylus ||  compilers.stylus;
        options.compilers.coffee = options.compilers.coffee || compilers.coffee;
        options.compilers.js = options.compilers.js || compilers.js;
        options.compilers.css = options.compilers.css || compilers.css;
      }
      options.minifyCss = options.minifyCss ||  false;
      options.minifyJs = options.minifyJs ||  false;
      options.complete = options.complete || function() {};
      this.app = app;
      this.js = new Js(options);
      this.css = new Css(options);
      if (typeof asset === "string") {
        require(asset)(new AssetsManager(this.css, this.js));
      } else if (typeof asset === 'function') {
        asset(new AssetsManager(this.css, this.js));
      } else {
        throw new Error("Unsupported asset type");
      }
      if (options.bundle) {
        done = _.after(2, options.complete);
        this.js.toBundles(done);
        this.css.toBundles(done);
      } else {
        this.app.use((new OnTheFlyCompiler(this.js, this.css, options.compilers)).middleware);
        options.complete();
      }
      if (this.app.locals) {
        this.app.locals({
          renderStyles: function(namespace) {
            if (namespace == null) {
              namespace = _this.css.defaultNamespace;
            }
            return _this.css.render(namespace);
          },
          renderJs: function(namespace) {
            if (namespace == null) {
              namespace = _this.js.defaultNamespace;
            }
            return _this.js.render(namespace);
          }
        });
      } else if (this.app.dynamicHelpers) {
        this.app.dynamicHelpers({
          renderStyles: this.css.render.bind(this.css),
          renderJs: this.js.render.bind(this.js)
        });
      }
    }

    return BundleUp;

  })();

  module.exports = function(app, assetPath, options) {
    return new BundleUp(app, assetPath, options);
  };

}).call(this);
